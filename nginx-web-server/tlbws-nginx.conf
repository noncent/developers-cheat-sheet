# -----------------------------------------------
# Default server configuration www.example.com
# -----------------------------------------------

# Extract the real client IP from X-Forwarded-For header, fallback to remote_addr if not present
map $http_x_forwarded_for $real_client_ip {
    "~^([^,]+)" $1;
    default $remote_addr;
}

# Map allowed IPs to a flag for admin login blocking (0 = allowed, 1 = blocked)
map $real_client_ip $block_admin_login {
    default 1;
    192.0.2.10 0;   # Office IP
    198.51.100.20 0; # VPN IP
    203.0.113.30 0;  # Home IP
}

# Set the root directory based on admin login block flag
map $block_admin_login $custom_root {
    1   "/var/www/html/example/web";      # Default root
    0   "/var/www/html/migration/web";    # Special root for allowed IPs
}

# Redirect non-www domain to www domain
server {
    listen 8080;
    server_name example.com;
    return 301 https://www.example.com$request_uri;
}

# Main server block for www.example.com
server {
    listen 8080 default_server;
    listen [::]:8080 default_server;

    # Set document root dynamically
    root $custom_root;

    # Default index files
    index index.php index.html index.htm;

    server_name www.example.com;

    # Access and error log locations
    access_log /var/log/example/access/access.log combined;
    error_log /var/log/example/error/error.log;

    # Set site base URL variable
    set $mysite https://www.example.com;

    # Remove trailing slashes from URLs
    rewrite ^(.+)/+$ $mysite$1 permanent;

    # Remove 'amp' query parameter from URLs
    if ($args ~* (^|&)amp($|=|&)) {
        return 301 https://$host$uri;
    }

    # Charset and file sending optimizations
    charset UTF-8;
    sendfile on;
    tcp_nopush on;
    server_tokens off;

    # Enable directory listing (autoindex)
    autoindex on;

    # Client body and header size limits
    client_max_body_size 64M;
    client_body_buffer_size 12k;
    client_header_buffer_size 1k;
    large_client_header_buffers 2 4k;

    # Enable gzip compression for supported content types
    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied expired no-cache no-store private auth;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_min_length 256;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/x-javascript application/xml;

    # Security headers
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-Content-Type-Options nosniff;
    add_header Referrer-Policy "strict-origin";
    add_header Permissions-Policy "interest-cohort=()";
    add_header Strict-Transport-Security "max-age=31536000";
    add_header Content-Security-Policy "upgrade-insecure-requests";

    # Only allow GET, HEAD, POST methods; block others
    if ($request_method !~ ^(GET|HEAD|POST)$ ) {
        return 444;
    }

    # Custom error pages
    error_page 403 /maintenance.html;
    location = /maintenance.html {
        root /var/www/html;
        internal;
    }

    error_page 401 /401.html;
    location = /401.html {
        root /var/www/html/example;
        internal;
    }

    error_page 500 502 503 504 /5xx.html;
    location = /5xx.html {
        root /var/www/html/example;
        internal;
    }

    # Serve traffic advice for Google prefetch proxy
    location = /.well-known/traffic-advice {
        types {}
        default_type "application/trafficadvice+json; charset=utf-8";
        return 200 '[ {
            "user_agent": "prefetch-proxy", "fraction": 1
        }
        ]';
    }

    # Favicon and robots.txt: no logging for not found
    location = /favicon.ico {
        log_not_found off;
        access_log off;
    }

    location = /robots.txt {
        allow all;
        log_not_found off;
        access_log off;
    }

    # Endpoint to display client IP and request info
    location /what-is-my-ip {
        add_header Content-Type text/plain;
        return 200 '{
            "method": "$request_method",
            "host": "$host",
            "http_referer": "$http_referer",
            "request": "$request",
            "real_client_ip": "$real_client_ip",
            "remote_addr": "$remote_addr",
            "x_forwarded_for": "$http_x_forwarded_for",
            "x_real_ip": "$http_x_real_ip",
            "proxy_protocol_addr": "$proxy_protocol_addr"
        }';
    }

    # Restrict /admin and /admin/login to allowed IPs only
    location ~ ^/admin(/login)?$ {
        if ($block_admin_login = 1) {
            return 403;
        }
        try_files $uri $uri/ /index.php?$query_string;
    }

    # Block PHP files in subdirectories (security)
    location ~ \..*/.*\.php$ {
        return 403;
    }

    # Block access to private files in sites directory
    location ~ ^/sites/.*/private/ {
        return 403;
    }

    # Deny PHP execution in files directory
    location ~ ^/sites/[^/]+/files/.*\.php$ {
        deny all;
    }

    # Allow all access to .well-known directory
    location ~* ^/.well-known/ {
        allow all;
    }

    # Block hidden files and directories (starting with .)
    location ~ (^|/)\. {
        return 403;
    }

    # Deny PHP execution in vendor directory
    location ~ /vendor/.*\.php$ {
        deny all;
        return 404;
    }

    # Deny access to sensitive file types and backup files
    location ~* \.(engine|inc|install|make|module|profile|po|sh|.*sql|theme|twig|tpl(\.php)?|xtmpl|yml)(~|\.sw[op]|\.bak|\.orig|\.save)?$|^(\.(?!well-known).*|Entries.*|Repository|Root|Tag|Template|composer\.(json|lock)|web\.config)$|^#.*#$|\.php(~|\.sw[op]|\.bak|\.orig|\.save)$ {
        deny all;
        return 404;
    }

    # Serve static assets with long cache and fallback to @rewrite
    location ~* \.(js|css|png|jpg|jpeg|gif|webp|ico|svg|woff|woff2|mp4|webm)$ {
        try_files $uri @rewrite;
        expires max;
        log_not_found off;
    }

    # Try files for image styles
    location ~ ^/sites/.*/files/styles/ {
        try_files $uri @rewrite;
    }

    # Try files for system files, fallback to index.php
    location ~ ^(/[a-z\-]+)?/system/files/ {
        try_files $uri /index.php?$query_string;
    }

    # Remove /index.php/ from URLs (clean URLs)
    if ($request_uri ~* "^(.*/)index\.php/(.*)") {
        return 307 $1$2;
    }

    # Main location: try files, fallback to index.php
    location / {
        autoindex off;
        try_files $uri $uri/ /index.php?$query_string;
        proxy_read_timeout 3600;
    }

    # Internal rewrite handler
    location @rewrite {
        rewrite ^ /index.php;
    }

    # PHP-FPM handler for .php files
    location ~ \.php$ {
        include snippets/fastcgi-php.conf;
        fastcgi_param HTTP_PROXY "";
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;
        fastcgi_param QUERY_STRING $query_string;
        fastcgi_intercept_errors on;
        fastcgi_buffer_size 128k;
        fastcgi_buffers 4 256k;
        fastcgi_busy_buffers_size 256k;
        fastcgi_temp_file_write_size 256k;
        fastcgi_connect_timeout 120;
        fastcgi_send_timeout 120;
        fastcgi_read_timeout 120;
        fastcgi_pass unix:/var/run/php/php-fpm.sock;
    }
}
